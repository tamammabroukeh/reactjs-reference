import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Swiper, SwiperSlide } from 'swiper/react';
import { Navigation, Pagination, Thumbs, FreeMode } from 'swiper/modules';
import { ChevronDown, ChevronUp, Plus, Crop, Palette, X } from 'lucide-react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { ThumbnailStrip } from './ThumbnailStrip';
import { CropTool } from './CropTool';
import { ImageFile, AspectRatio, ASPECT_RATIOS, CropState } from '@/types/gallery';
import { cn } from '@/lib/utils';

// Import Swiper styles
import 'swiper/css';
import 'swiper/css/navigation';
import 'swiper/css/pagination';
import 'swiper/css/thumbs';
import 'swiper/css/free-mode';

interface ImageGalleryProps {
  isOpen: boolean;
  onClose: () => void;
  images: ImageFile[];
  onImagesChange: (images: ImageFile[]) => void;
  onAddMoreImages: () => void;
}

export const ImageGallery: React.FC<ImageGalleryProps> = ({
  isOpen,
  onClose,
  images,
  onImagesChange,
  onAddMoreImages
}) => {
  const [activeIndex, setActiveIndex] = useState(0);
  const [showThumbnails, setShowThumbnails] = useState(false);
  const [thumbsSwiper, setThumbsSwiper] = useState<any>(null);
  const [mainSwiper, setMainSwiper] = useState<any>(null);
  const [cropState, setCropState] = useState<CropState>({
    isActive: false,
    imageId: null,
    crop: { x: 0, y: 0, width: 100, height: 100 }
  });

  const handleDeleteImage = (imageId: string) => {
    const newImages = images.filter(img => img.id !== imageId);
    onImagesChange(newImages);
    
    if (activeIndex >= newImages.length && newImages.length > 0) {
      setActiveIndex(newImages.length - 1);
    }
  };

  const handleImageReorder = (newImages: ImageFile[]) => {
    onImagesChange(newImages);
  };

  const handleThumbnailClick = (index: number) => {
    setActiveIndex(index);
    if (mainSwiper) {
      mainSwiper.slideTo(index);
    }
  };

  const handleAspectRatioChange = (aspectRatio: AspectRatio) => {
    const updatedImages = images.map(img => ({
      ...img,
      aspectRatio: aspectRatio.value
    }));
    onImagesChange(updatedImages);
  };

  const handleStartCrop = () => {
    if (images[activeIndex]) {
      setCropState({
        isActive: true,
        imageId: images[activeIndex].id,
        crop: { x: 10, y: 10, width: 80, height: 80 }
      });
    }
  };

  const handleCropComplete = (cropData: any) => {
    if (cropState.imageId) {
      const updatedImages = images.map(img =>
        img.id === cropState.imageId
          ? { ...img, cropData }
          : img
      );
      onImagesChange(updatedImages);
    }
    setCropState({ isActive: false, imageId: null, crop: { x: 0, y: 0, width: 100, height: 100 } });
  };

  const handleCropCancel = () => {
    setCropState({ isActive: false, imageId: null, crop: { x: 0, y: 0, width: 100, height: 100 } });
  };

  if (images.length === 0) return null;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-[95vw] max-h-[95vh] p-0 bg-gallery-bg border-border/20 backdrop-blur-glass">
        <DialogHeader className="p-6 pb-4 border-b border-border/20">
          <div className="flex items-center justify-between">
            <DialogTitle className="text-foreground flex items-center gap-2">
              <Palette className="h-5 w-5 text-primary" />
              Image Gallery ({images.length} images)
            </DialogTitle>
            <Button variant="ghost" size="sm" onClick={onClose}>
              <X className="h-4 w-4" />
            </Button>
          </div>
        </DialogHeader>

        <div className="relative flex-1 overflow-hidden">
          {cropState.isActive ? (
            <CropTool
              image={images.find(img => img.id === cropState.imageId)!}
              onComplete={handleCropComplete}
              onCancel={handleCropCancel}
            />
          ) : (
            <>
              {/* Thumbnail Strip */}
              <AnimatePresence>
                {showThumbnails && (
                  <motion.div
                    initial={{ y: "-100%", opacity: 0 }}
                    animate={{ y: 0, opacity: 1 }}
                    exit={{ y: "-100%", opacity: 0 }}
                    transition={{ type: "spring", stiffness: 300, damping: 30 }}
                    className="absolute top-0 left-0 right-0 bg-gallery-surface/90 backdrop-blur-sm border-b border-border/20 p-4 z-20"
                  >
                    <ThumbnailStrip
                      images={images}
                      activeIndex={activeIndex}
                      onImageClick={handleThumbnailClick}
                      onImageDelete={handleDeleteImage}
                      onImagesReorder={handleImageReorder}
                      onAddMore={onAddMoreImages}
                      onThumbsInit={setThumbsSwiper}
                    />

                    {/* Action Buttons */}
                    <div className="flex justify-center mt-4 space-x-3">
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="outline" size="sm" className="bg-gallery-surface hover:bg-gallery-surface-hover">
                            <Palette className="h-4 w-4 mr-2" />
                            Aspect Ratio
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent className="w-48 bg-popover border-border/50">
                          {ASPECT_RATIOS.map((ratio) => (
                            <DropdownMenuItem
                              key={ratio.label}
                              onClick={() => handleAspectRatioChange(ratio)}
                              className="hover:bg-gallery-surface-hover"
                            >
                              <div>
                                <div className="font-medium">{ratio.label}</div>
                                <div className="text-xs text-muted-foreground">{ratio.description}</div>
                              </div>
                            </DropdownMenuItem>
                          ))}
                        </DropdownMenuContent>
                      </DropdownMenu>

                      <Button
                        variant="outline"
                        size="sm"
                        onClick={handleStartCrop}
                        className="bg-gallery-surface hover:bg-gallery-surface-hover"
                      >
                        <Crop className="h-4 w-4 mr-2" />
                        Crop Image
                      </Button>
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>

              {/* Toggle Thumbnails Button */}
              <div className="absolute top-4 left-1/2 transform -translate-x-1/2 z-10">
                <Button
                  variant="secondary"
                  size="sm"
                  onClick={() => setShowThumbnails(!showThumbnails)}
                  className="bg-gallery-surface/80 backdrop-blur-sm hover:bg-gallery-surface-hover border border-border/20"
                >
                  {showThumbnails ? (
                    <ChevronUp className="h-4 w-4" />
                  ) : (
                    <ChevronDown className="h-4 w-4" />
                  )}
                  {showThumbnails ? 'Hide' : 'Show'} Thumbnails
                </Button>
              </div>

              {/* Main Image Swiper */}
              <div className="h-[70vh] bg-gallery-surface">
                <Swiper
                  onSwiper={setMainSwiper}
                  modules={[Navigation, Pagination, Thumbs]}
                  navigation
                  pagination={{ clickable: true }}
                  thumbs={{ swiper: thumbsSwiper }}
                  onSlideChange={(swiper) => setActiveIndex(swiper.activeIndex)}
                  className="h-full w-full"
                  spaceBetween={0}
                  slidesPerView={1}
                >
                  {images.map((image) => (
                    <SwiperSlide key={image.id}>
                      <div className="flex items-center justify-center h-full p-4">
                        <motion.img
                          src={image.url}
                          alt={image.name}
                          className={cn(
                            "max-w-full max-h-full object-contain rounded-lg shadow-elegant",
                            image.aspectRatio && image.aspectRatio > 0 && "object-cover"
                          )}
                          style={{
                            aspectRatio: image.aspectRatio && image.aspectRatio > 0 
                              ? image.aspectRatio 
                              : undefined
                          }}
                          initial={{ opacity: 0, scale: 0.9 }}
                          animate={{ opacity: 1, scale: 1 }}
                          transition={{ duration: 0.3 }}
                        />
                      </div>
                    </SwiperSlide>
                  ))}
                </Swiper>
              </div>
            </>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
};